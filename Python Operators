'''
Import statement
Global declaration
    variables
    functions
    classes
Statements
'''

#operators: accepts one or more inputs in the form of variables or expressions, performs a task
'''
1. Unary Operator
2. Arithmetic Operator
3. Relational Operator
4. Logical Operator
5. Assignment Operator
6. Bitwise Operator
7. Membership Operator
'''

#1. Unary Operator
'''
- require a single variable or expression as input.

    a. '~' : inverts the bits in a number
             '0' becomes '1'
             '1' becomes '0'
    
    b. '-' : negates the original value
    
    c. '+' : returns same value 
'''

#2. Arithmetic Operators
'''
- perform complex math.

    +   Adds two values together 
    -   Subtracts the right operand from the left operand 
    *   Multiplies the right operand by the left operand 
    /   Divides the left operand by the right operand 
    %   Divides the left operand by the right operand and returns the 
        remainder
    **  Calculates the exponential value of the right operand by the left 
        operand
    //  Performs integer division, in which the left operand is divided by the 
        right operand and only the whole number is returned 
'''

#Relational Operator
'''
- compare one value to another value and returns true when relation we have specified is True

    ==      Determines whether two values are equal. 
    !=      Determines whether two values are not equal. 
    >       Verifies that the left operand value is greater than the right operand value. 
    <       Verifies that the left operand value is less than the right operand value. 
    >=      Verifies that the left operand value is greater than or equal to the 
            right operand value
    <=      Verifies that the left operand value is less than or equal to the right 
            operand value.
'''

#Logical Operator
'''
- combine the true or false value of variables or expressions 

    and     Determines whether both operands are true. 
    
    or      Determines when one of two operands is true. 
    
    not     Negates the truth value of a single operand. 
            A true value becomes false and 
            a false value becomes true.
'''

#Assignment Operator
'''
- place data within a variable.

    =   Assigns the value found in the right operand to the left operand.
    
    +=  Adds the value found in the right operand to the value found in the 
        left operand and places the result in the left operand.
    
    -=  Subtracts the value found in the right operand from the value found
        in the left operand and places the result in the left operand.
    
    *=  Multiplies the value found in the right operand by the value found in 
        the left operand and places the result in the left operand.
    
    /=  Divides the value found in the left operand by the value found in the 
        right operand and places the result in the left operand.
    
    %=  Divides the value found in the left operand by the value found in the 
        right operand and places the remainder in the left operand.
    
    **= Determines the exponential value found in the left operand when 
        raised to the power of the value found in the right operand and places 
        the result in the left operand.
    
    //= Divides the value found in the left operand by the value found in the 
        right operand and places the integer (whole number) result in the left 
        operand.
'''

#Bitwise Operator
'''
-  interact with each bit within the number in a specific way.

    & (and)     Determines whether both individual bits within two operators 
                are true and sets the resulting bit to true when they are.
    
    | (or)      Determines whether either of the individual bits within two 
                operators is true and sets the resulting bit to true when one of 
                them is.
    
    ^ (Exclusive or)
                Determines whether just one of the individual bits within two 
                operators is true and sets the resulting bit to true when one is. 
                When both bits are true or both bits are false, the result is false.
                
    ~ (One complement)
                Calculates the one’s complement value of a number. ~0b1100 = –0b1101
    
    << (Left shift)
                Shifts the bits in the left operand left by the value of the right 
                operand. All new bits are set to 0 and all bits that flow off the end 
                are lost.
    
    >> (Right shift)
                Shifts the bits in the left operand right by the value of the right 
                operand. All new bits are set to 0 and all bits that flow off the end 
                are lost.
'''

#Membership Operator
'''
- detect the appearance of a value within a list or sequence and then output 
  the truth value of that appearance
  
    in      Determines whether the value in the left operand 
            appears in the sequence found in the right operand.
    
    not in  Determines whether the value in the left operand is 
            missing from the sequence found in the right operand
'''

#Operator precedence
'''
    ()          You use parentheses to group expressions and to override the default precedence so
                that you can force an operation of lower precedence (such as addition) to take 
                precedence over an operation of higher precedence (such as multiplication).
    **          Exponentiation raises the value of the left operand to the power of the right operand.
    ~ + -       Unary operators interact with a single variable or expression.
    * / % //    Multiply, divide, modulo, and floor division.
    + -         Addition and subtraction.
    >> <<       Right and left bitwise shift.
    &           Bitwise AND.
    ^ |         Bitwise exclusive OR and standard OR
    <= < > >=   Comparison operators.
    == !=       Equality operators.
    
    = %= /=
    //= -= +=   Assignment operators.
    *= **=
                
    In          
    not in      Membership operators.
    
    not or and  Logical operators
'''
